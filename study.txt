불현듯 드는 의문 메모
1. 원본 데이터를 오염시키지 않기위해 Object.assign을 사용하였는데,
   Lodash, jQeury의 _.extend / _.assign / _.merge의 차이점 - https://it-man.tistory.com/656

==============================================================================================================================

- React - react 공식문서 확인 잘 할것

내부 - state / 외부 - props

this.props - 사용자에게 제공 / read-only / 수정안됨
this.state - 내부에서 관리 / this.setState로 데이터 변경

상위 component의 state를 하위 component의 props로 전달

component내부에서 자신에게 전달 된 this.props의 값을 변경할 수 없다 - this.props
component외부(상위 component)에서는 값을 변경할 수 있다 - this.setState

상위 component가 하위 component에게 값을 전달할 때 - this.props 통해 전달
하위 component가 상위 component의 어떤 값을 변경할 때 - event를 통해 state값 변경

component 설계시 고려해야할 부분
state나 props를 변경하게 되면 라이프사이클에 의해 불필요한 render가 호출되기 때문에,
state에 들어갈 내용을 고민하여 설계해야 한다 - 비용낭비

배열에 데이터를 추가할 때는 push() 보다는 concat()을 사용하는게 좋다 
- 성능관리시 원본데이터가 오염되어 수정하기 까다로움

개발 시 원본을 변경하지 않는다 - 불변성 (immutable)
this.setState 어떠한 값을 줄 때는 원본을 오염시키지 않고 복제본을 만들어 수정하고 원본을 변경하는 방식으로 해야한다.
- shouldComponentUpdate함수를 사용할 때 원본을 변경하게 되면 문제가 발생 - 원본 데이터와 변경 된 데이터 비교 불가

shouldComponentUpdate(newProps, newState)
- render보다 먼저 호출됨
- return값이 true면 render가 호출됨, false면 호출되지 않음 (불필요한 render 호출 방지) - 비용관리
- newProps인자는 새롭게 변경 된 데이터를 나타냄
  ㄴ ex) newProps.data(변경 된 데이터) === this.props.data(원본 데이터) - 원본이 변경되면 비교 불가

Array 경우

방법1
var arr = [1, 2];
var arr2 = Array.from(arr);
arr2.push("값");

방법2
var arr = [1, 2];
var arr2 = arr.concat("값");

방법1, 2모두 원본 데이터를 오염시키지 않고 새로운 배열을 변수에 담아 사용

Object 경우
var obj = {name: "test"};
var obj2 = Object.assign({}, obj);

결론적으로는 Array와 Object 둘 다 방법만 다를 뿐 원본 데이터를 오염시키지 않고 개발을 하는것이다

==============================================================================================================================

== Redux - 상태관리 라이브러리
redux를 사용하면, component의 상태(state) 관련 로직을 다른파일로 분리시켜 효율적으로 관리할 수 있다.
또한, component끼리 상태(state)를 공유하게 될 때 여러 컴포넌트를 거치지 않고 손쉽게 상태(state)값을 전달할 수 있다.


== 필요성

redux는 전역(global) 상태(state)를 하게 될 때 굉장히 효과적이다.
앱이 지니고 있는 상태(state)와, 상태(state) 변화 로직이 들어있는 저장소(store)를 통하여, 원하는 component에 원하는 상태(state)값과 함수를 직접 주입해줄 수 있다.
하나의 외부 데이터 저장소(store)에서 관리함, 저장소(store)에서 어떠한 상태(state)값이 바뀌면 관련 된 모든 component의 상태(state)값이 변경된다.


== 특징

1. 하나의 상태를 갖는다 (하나의 객체에서 모든 데이터를 관리한다)
2. 외부로부터 접근할 수 없으며(직접 수정 안됨), 데이터를 수정할 땐 dispatch > reducer / 데이터를 가져올 땐 getState를 사용한다
3. state가 변하게 되면 각각의 component의 상태가 변하게 된다
4. UNDO / REDO를 쉽게 할 수 있다
   각각의 스테이트 값들을 생성할 때 철저하게 통제하고,
   데이터를 만들 때 원본을 변경하는게 아니라, 원본을 복제하고 복제한 데이터를 수정해서 그 데이터를 새로운 원본으로 만들기 때문에
   각각의 상태의 변화가 서로에게 영향을 전혀 주지 않은 독립적 형태를 유지할 수 있고 이러한 특징을 잘 이용하면 상태를 바꾸는것을 매우 쉽게 할 수 있다.
5. 모듈리로딩
   코드를 작성하면 코드가 자동으로 어플리케이션으로 적용 됨


== 개념정리

1. 액션 (action)
상태(state)에 어떠한 변화가 필요하게 될 때, 액션을 발생시킨다. 이는 하나의 객체로 표현이 되는데 다음과 같은 형식으로 이루어져 있다.
ex)
{
   type: "value
}

액션 객체는 type property를 필수적으로 가지고 있어야 하고 그 외의 값은 사용자 마음대로 넣어줄 수 있다.
ex)
{
   typr: "value,
   param: {
      data: hi,
      text: "redux 배우기"
   }
}
{
   type: "GLOBAL_VALUE,
   text: "hello"
}

2. 액션 생성함수 (Action Creator)
액션 생성함수는 액션을 만드는 함수. 단순, 파라미터를 받아와 액션 객체 형태로 만들어준다.
ex)
function addTodo(data) {
   return {
      type: "value",
      data: ...
   }
}
ex) 화살표 함수 예제
const chageInput = text => ({
   type: "value",
   data: ...
})

3. 리듀서 (Reducer)
리듀서는 변화를 일으키는 함수다. 리듀서는 두가지의 파라미터를 받음
ex)
function reduser(state, action) {
   상태(state) 업데이트 로직
   return alteredState;
}
리듀서는 현재의 상태(state)와, 전달 받은 액션을 참고하여 새로운 상태(state)를 만들어서 반환한다.

4. 스토어 (Store)
리덕스에서는 한 어플리케이션 당 하나의 스토어를 만들게 됨. 스토어 안에는 현재의 앱 상태(state)와 리듀서가 들어가 있고,
추가적으로 몇가지 내장 함수들이 있다.

5. 디스패치 (dispatch)
디스패치는 스토어 내장함수 중 하나이다. 디스패치는 액션을 발생 시키는 것이라고 이해하면 됨.
dispatch라는 함수에 액션을 파라미터로 전달 ex) dispatch(action)
이렇게 호출을 하면 스토어는 리듀서 함수를 실행시켜 해당 액션을 처리하는 로직이 있다면 액션을 참고하여 새로운 상태(state)를 만들어준다.

6. 구독 (subscribe)
구독 또한 스토어의 내장함수. subscribe함수는 함수 형태의 값을 파라미터로 받아옴.
subscribe함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출된다.

출처 - https://velog.io/@velopert